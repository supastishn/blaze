name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'The tag for the release, e.g. v1.0.1'
        required: true

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: linux-x64
            os: ubuntu-latest
            arch: x64
          - name: linux-arm64
            os: ubuntu-latest
            arch: arm64
          - name: linux-arm64-termux
            os: ubuntu-latest
            arch: arm64
          - name: windows-x64
            os: windows-latest
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          architecture: 'x64'

      - name: Install dependencies
        run: npm install

      - name: Build from TypeScript
        run: npm run build

      - name: Install patchelf (for ARM64 Termux build)
        if: matrix.name == 'linux-arm64-termux'
        run: sudo apt-get update && sudo apt-get install -y patchelf

      - name: Package application
        run: npm run package
        env:
          TARGET_PLATFORM: ${{ matrix.name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ts2cpp-binary-${{ matrix.name }}
          path: dist-sea/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          draft: false
          prerelease: false

      - name: Upload Linux x64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ts2cpp-binary-linux-x64/ts2cpp-linux-x64
          asset_name: ts2cpp-linux-x64
          asset_content_type: application/octet-stream

      - name: Upload Linux arm64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ts2cpp-binary-linux-arm64/ts2cpp-linux-arm64
          asset_name: ts2cpp-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload Linux arm64 (Termux) binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ts2cpp-binary-linux-arm64-termux/ts2cpp-linux-arm64-termux
          asset_name: ts2cpp-linux-arm64-termux
          asset_content_type: application/octet-stream

      - name: Upload Windows x64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ts2cpp-binary-windows-x64/ts2cpp-windows-x64.exe
          asset_name: ts2cpp-windows-x64.exe
          asset_content_type: application/octet-stream
